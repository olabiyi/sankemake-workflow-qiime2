from os import path,getcwd

# Run the pipeline line so on your local computer
# snakemake -npr --cores 10 --keep-going --rerun-incomplete --restart-times 3

configfile: "config/config.yaml"


RULES=["Download_unite_database", "Unzip_unite_DB", "modify_and_rename_unite_files","Import_unite_sequences",
       "Import_unite_taxonomy", "Import_unite_taxonomy", "Train_unite_classifier"]



rule all:
    input:
        "logs/Download_unite_database/",
        "logs/modify_and_rename_unite_files/",
        "logs/Train_unite_classifier/",
        "databases/unite-classifier.qza"


# This rule will make rule specific log directories
# # in order to easily store the standard input and stand error
# # generated when submiting jobs to the cluster
rule make_logs_directories:
    output:
        directory("logs/Download_unite_database/"),
        directory("logs/modify_and_rename_unite_files/"),
        directory("logs/Train_unite_classifier/")
    threads: 1
    shell:
        """
         [ -d logs/ ] || mkdir -p logs/
         cd logs/
         for RULE in {RULES}; do
          [ -d ${{RULE}}/ ] || mkdir -p ${{RULE}}/
         done
        """



# --------------- Create Unite database for QIIME2 -----------------#

rule Download_unite_database:
    input:
        log_dirs=rules.make_logs_directories.output
    output:
        temp("databases/unite.gz")
    threads: 1
    log: "logs/Download_unite_database/Download_unite_database.log"
    params:
        url=config["UNITE_URL"]
    shell:
        "wget -O {output} {params.url} > {log} 2>&1 " 

rule Unzip_unite_DB:
    input: rules.Download_unite_database.output
    output: 
        sequences="databases/sh_qiime_release_s_all_10.05.2021/sh_refs_qiime_ver8_dynamic_s_all_10.05.2021.fasta",
        taxonomy="databases/sh_qiime_release_s_all_10.05.2021/sh_taxonomy_qiime_ver8_dynamic_s_all_10.05.2021.txt"
    threads: 1
    #log: "logs/Unzip_unite_DB/Unzip_unite_DB.log"
    params:
        out_dir=lambda w, input: path.dirname(input[0]),
        basename=lambda w, input: path.basename(input[0])
    shell:
        """
        cd {params.out_dir}
        #[ -f {log} ] || touch {log}
        tar -xvzf {params.basename}
        """

# modify the taxonomy header such that the first two lines 
# are "Feature ID\tTaxon"
# and rename the sequence.fasta file
rule modify_and_rename_unite_files:
    input:
        sequences=rules.Unzip_unite_DB.output.sequences,
        taxonomy=rules.Unzip_unite_DB.output.taxonomy
    output:
        sequences="databases/unite-sequences.fasta",
        taxonomy="databases/unite-taxonomy.txt"
    threads: 2
    log: "logs/modify_and_rename_unite_files/modify_and_rename_unite_files.log"
    shell:
        """
        # Modify and rename the unite taxonomy file
         (echo -e "Feature ID\tTaxon"; cat {input.taxonomy}) > {output.taxonomy} 2> {log}

        # Copy and rename the unite sequences file
        cat {input.sequences} > {output.sequences} 2> {log}
        """


# Setting up the already trimmed database
rule Import_unite_sequences:
    input: rules.modify_and_rename_unite_files.output.sequences
    output: "databases/unite-sequences.qza"
    threads: 2
    log: "logs/Import_unite_sequences/Import_unite_sequences.log"
    params:
        conda_activate=config["QIIME2_ENV"]
    shell:
        """
        set +u
 
        {params.conda_activate}
 
        set -u

        qiime tools import \
             --type 'FeatureData[Sequence]' \
             --input-path {input} \
             --output-path {output} > {log} 2>&1
        """

        
        
# Import Taxonomy
rule Import_unite_taxonomy:
    input: rules.modify_and_rename_unite_files.output.taxonomy
    output: "databases/unite-taxonomy.qza"
    threads: 2
    log: "logs/Import_unite_taxonomy/Import_unite_taxonomy.log"
    params:
        conda_activate=config["QIIME2_ENV"]
    shell:
        """
        set +u

        {params.conda_activate}

        set -u

        qiime tools import \
             --type 'FeatureData[Taxonomy]' \
             --input-path {input} \
             --output-path {output} > {log} 2>&1
        """


# Train the classifier
rule Train_unite_classifier:
    input: 
        sequences=rules.Import_unite_sequences.output,
        taxonomy=rules.Import_unite_taxonomy.output
    output: "databases/unite-classifier.qza"
    threads: 10
    log: "logs/Train_unite_classifier/Train_unite_classifier.log"
    params:
        conda_activate=config["QIIME2_ENV"]
    shell:
        """
        set +u

        {params.conda_activate}

        set -u
        
        qiime feature-classifier fit-classifier-naive-bayes \
              --i-reference-reads {input.sequences} \
              --i-reference-taxonomy {input.taxonomy} \
              --o-classifier {output} > {log} 2>&1
        """


